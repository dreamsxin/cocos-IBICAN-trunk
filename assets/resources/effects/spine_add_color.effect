// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

// Note: Current format version is experiment, the format may be changed.
// The future format may not be compatible, you may need to update the script manually.

// 注意：当前版本的格式是实验性的，之后还会进行修改。
// 后续版本的格式不保证兼容当前格式，可能需要手动升级到最新版本。，
CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        brightness: { value: 1.0 }
        contrast: { value: 1.0 }
        saturation: { value: 1.0 }
        added: { value: [1, 1, 1, 1], inspector: { type: color }}
}%

CCProgram vs %{

precision highp float;

#include <cc-global>
#include <cc-local>

in vec3 a_position;
in lowp vec4 a_color;
#if USE_TINT
  in lowp vec4 a_color0;
#endif

in mediump vec2 a_uv0;
out mediump vec2 v_uv0;
out lowp vec4 v_color;
out lowp vec4 v_light;
#if USE_TINT
  out lowp vec4 v_dark;
#endif

void main () {
  mat4 mvp;
  #if CC_USE_MODEL
    mvp = cc_matViewProj * cc_matWorld;
  #else
    mvp = cc_matViewProj;
  #endif

  v_uv0 = a_uv0;
  v_color = a_color;
  v_light = a_color;
  #if USE_TINT
    v_dark = a_color0;
  #endif

  gl_Position = mvp * vec4(a_position, 1);
}

}%

CCProgram fs %{

precision highp float;

uniform sampler2D texture;
varying mediump vec2 v_uv0;
varying lowp vec4 v_light;
#if USE_TINT
  varying lowp vec4 v_dark;
#endif

uniform PROPERTIES {
  float alphaThreshold;
  float brightness;
  float contrast;
  float saturation;
  vec4 added;
};
#if USE_ALPHA_TEST
  void ALPHA_TEST (in vec4 color) {
    if (color.a < alphaThreshold) discard;
  }
#endif

#include <alpha-test>
#include <texture>

void main() {
  vec4 texColor = vec4(1.0);
  CCTexture(texture, v_uv0, texColor);

  vec4 dst;
  #if USE_TINT
    dst.a = v_light.a * texColor.a;
    dst.rgb = ((texColor.a - 1.0) * v_dark.a + 1.0 - texColor.rgb) * v_dark.rgb + texColor.rgb * v_light.rgb;
  #else
    dst = texColor * v_light;
  #endif

  #if USE_ALPHA_TEST
    ALPHA_TEST(dst);
  #endif

  // 调整亮度
  vec3 finalColor = vec3(dst) * brightness;
  float gray = 0.2125 * dst.r + 0.7154 * dst.g + 0.0721 * dst.b;
  // 调整饱和度
  vec3 grayColor = vec3(gray, gray, gray);
  finalColor = mix(grayColor, finalColor, saturation);
  // 调整对比度
  vec3 avgColor = vec3(0.5, 0.5, 0.5);
  finalColor = mix(avgColor, finalColor, contrast);
  dst = vec4(finalColor, dst.a);
  // 颜色叠加
  if(dst.a > 0.0) {
      gl_FragColor = added * dst;
  } else {
      gl_FragColor = dst;
  }
}
}%
