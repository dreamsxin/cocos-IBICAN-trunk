{
  "ver": "1.0.25",
  "uuid": "e616e565-8977-4258-a041-0a824f7cedba",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute lowp vec4 a_color;\n#if USE_TINT\n  attribute lowp vec4 a_color0;\n#endif\nattribute mediump vec2 a_uv0;\nvarying mediump vec2 v_uv0;\nvarying lowp vec4 v_color;\nvarying lowp vec4 v_light;\n#if USE_TINT\n  varying lowp vec4 v_dark;\n#endif\nvoid main () {\n  mat4 mvp;\n  #if CC_USE_MODEL\n    mvp = cc_matViewProj * cc_matWorld;\n  #else\n    mvp = cc_matViewProj;\n  #endif\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  v_light = a_color;\n  #if USE_TINT\n    v_dark = a_color0;\n  #endif\n  gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\nprecision highp float;\nuniform sampler2D texture;\nvarying mediump vec2 v_uv0;\nvarying lowp vec4 v_light;\n#if USE_TINT\n  varying lowp vec4 v_dark;\n#endif\nuniform float alphaThreshold;\nuniform float brightness;\nuniform float contrast;\nuniform float saturation;\nuniform vec4 added;\n#if USE_ALPHA_TEST\n  void ALPHA_TEST (in vec4 color) {\n    if (color.a < alphaThreshold) discard;\n  }\n#endif\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvoid main() {\n  vec4 texColor = vec4(1.0);\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    texColor.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    texColor.a *= texture_tmp.a;\n  #else\n    texColor *= texture_tmp;\n  #endif\n  vec4 dst;\n  #if USE_TINT\n    dst.a = v_light.a * texColor.a;\n    dst.rgb = ((texColor.a - 1.0) * v_dark.a + 1.0 - texColor.rgb) * v_dark.rgb + texColor.rgb * v_light.rgb;\n  #else\n    dst = texColor * v_light;\n  #endif\n  #if USE_ALPHA_TEST\n    ALPHA_TEST(dst);\n  #endif\n  vec3 finalColor = vec3(dst) * brightness;\n  float gray = 0.2125 * dst.r + 0.7154 * dst.g + 0.0721 * dst.b;\n  vec3 grayColor = vec3(gray, gray, gray);\n  finalColor = mix(grayColor, finalColor, saturation);\n  vec3 avgColor = vec3(0.5, 0.5, 0.5);\n  finalColor = mix(avgColor, finalColor, contrast);\n  dst = vec4(finalColor, dst.a);\n  if(dst.a > 0.0) {\n      gl_FragColor = added * dst;\n  } else {\n      gl_FragColor = dst;\n  }\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin lowp vec4 a_color;\n#if USE_TINT\n  in lowp vec4 a_color0;\n#endif\nin mediump vec2 a_uv0;\nout mediump vec2 v_uv0;\nout lowp vec4 v_color;\nout lowp vec4 v_light;\n#if USE_TINT\n  out lowp vec4 v_dark;\n#endif\nvoid main () {\n  mat4 mvp;\n  #if CC_USE_MODEL\n    mvp = cc_matViewProj * cc_matWorld;\n  #else\n    mvp = cc_matViewProj;\n  #endif\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  v_light = a_color;\n  #if USE_TINT\n    v_dark = a_color0;\n  #endif\n  gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\nprecision highp float;\nuniform sampler2D texture;\nvarying mediump vec2 v_uv0;\nvarying lowp vec4 v_light;\n#if USE_TINT\n  varying lowp vec4 v_dark;\n#endif\nuniform PROPERTIES {\n  float alphaThreshold;\n  float brightness;\n  float contrast;\n  float saturation;\n  vec4 added;\n};\n#if USE_ALPHA_TEST\n  void ALPHA_TEST (in vec4 color) {\n    if (color.a < alphaThreshold) discard;\n  }\n#endif\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvoid main() {\n  vec4 texColor = vec4(1.0);\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    texColor.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    texColor.a *= texture_tmp.a;\n  #else\n    texColor *= texture_tmp;\n  #endif\n  vec4 dst;\n  #if USE_TINT\n    dst.a = v_light.a * texColor.a;\n    dst.rgb = ((texColor.a - 1.0) * v_dark.a + 1.0 - texColor.rgb) * v_dark.rgb + texColor.rgb * v_light.rgb;\n  #else\n    dst = texColor * v_light;\n  #endif\n  #if USE_ALPHA_TEST\n    ALPHA_TEST(dst);\n  #endif\n  vec3 finalColor = vec3(dst) * brightness;\n  float gray = 0.2125 * dst.r + 0.7154 * dst.g + 0.0721 * dst.b;\n  vec3 grayColor = vec3(gray, gray, gray);\n  finalColor = mix(grayColor, finalColor, saturation);\n  vec3 avgColor = vec3(0.5, 0.5, 0.5);\n  finalColor = mix(avgColor, finalColor, contrast);\n  dst = vec4(finalColor, dst.a);\n  if(dst.a > 0.0) {\n      gl_FragColor = added * dst;\n  } else {\n      gl_FragColor = dst;\n  }\n}"
      }
    }
  ],
  "subMetas": {}
}